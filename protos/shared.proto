syntax = "proto3";

package frl;

import "protos/activity/model_state.proto";
import "protos/activity/tkpg.proto";

message BellItem {
  enum Kind {
    INVALID = 0;
    ACTIVITY = 1;
    KP_NODE = 2;
  }
}

// Meta information of a Bell item.
//
// Next ID: 5
message BellItemMeta {
  BellItem.Kind kind = 1;
  int32 correct_count = 2;
  int32 incorrect_count = 3;
  // This could be used for pruning.
  int64 last_seen_timestamp_usec = 4;
}

// Meta information of a suggested lesson.
//
// Next ID: 12
message LessonMeta {
  // Whether the lesson has been replaced.
  bool is_replaced = 1;
  uint64 replaced_lesson_id = 2;
  int64 last_replaced_timestamp_usec = 10;
  // Include recommendation and ability graph.
  int32 complete_count = 3;
  int64 last_complete_timestamp_usec = 4;
  // The last session ID.
  uint64 last_session_id = 5;
  // Recent number of times the lesson was not completed. Set to zero once the
  // lesson is completed.
  int32 last_incomplete_count = 6;
  // Number of times the lesson has been suggested.
  int32 suggest_count = 8;
  int64 last_suggest_timestamp_usec = 11;
  // Number of times the lesson has been suggeted and not completed ever.
  int32 suggest_not_complete_count = 9;

  // The latest updated time on this meta.
  int64 updated_timestamp_usec = 7;
}

// Next ID: 4
message PTPerformance {
  float pt_count = 1;
  // Score summation in all PTs.
  float sum_score = 2;
  // Proficiency value of recent five PTs.
  repeated float recent_proficiency = 3;
}

// Knowledge point state.
//
// Next ID: 11
message KnowledgePointState {
  // Next ID: 5
  message DailyProficiency {
    // Last score receieved timestamp usec.
    int64 last_timestamp_usec = 2;
    // Skill proficiency value estimated from lq.henox.SkillProficiency.
    float proficiency = 4;

    reserved 1, 3;
  }
  // Proficiency trajectory in history sessions. This could be pruned for the
  // sake of DB efficiency.
  repeated DailyProficiency history_proficiency = 1;
  // If the KP is grasped ever.
  bool is_grasped = 2;
  // KP performance in placement tests.
  PTPerformance pt_performance = 3;
  // The number of times that we show user this kp as display tag in an
  // autogenerated lesson.
  int32 num_of_showing_auto_lesson = 4;
  // Number of unique learning days.
  int32 day_of_learning = 5;
  // Last timestamp usec of the KP node shown in any events. This is used for
  // updating `day_of_learning`.
  int64 last_show_timestamp_usec = 6;
  // Last session of the KP node studied as display node.
  uint64 last_show_session_id = 10;

  repeated float primary_score = 7;
  // If the primary_score can be appended.
  bool enough_primary_score = 8;
}

// Store aggregated meta information from different learning dimensions.
//
// Next ID: 11
message UserLearningState {
  // Key is lesson ID. Value is the latest meta information.
  map<uint64, LessonMeta> latest_lesson_meta = 1;
  // Key is KP ID.
  map<uint64, KnowledgePointState> show_kp_state = 4;
  // Key is Activity ID.
  // Since the number of activities could be huge (10k+) in furture. Remember to
  // prune the map for the sake of DB efficiency.
  map<uint64, BellItemMeta> activity_meta = 3;
  // Top K policy gradient model state.
  frl.activity.TKPGState tkpg_state = 5;
  // Number of days from the very first lesson.
  int32 learning_days = 6;
  // Save the last N learning days, only store the first push time every day.
  repeated int64 history_learning_days = 7;
  int64 level_updated_timestamp_usec = 9;
  // Model state for different experiment.
  repeated frl.activity.ModelState model_state = 10;

  reserved 2;
}

// Lesson suggested for a user within one day.
//
// Next ID: 9
message SuggestedLesson {
  // Next ID: 6
  enum Algorithm {
    UNKNOWN = 0;
    PRD_1 = 1;  // PRD 1.0
    PRD_2 = 2;  // PRD 2.0
    AUTO_GENERATED = 3;
    TKPG = 4;
    COMPREHENSIVE = 5;
  }

  uint64 lesson_id = 1;
  // If this is a review lesson. Otherwise, it is a mandatory lesson.
  bool is_review = 2;
  int64 suggest_timestamp_usec = 3;
  int64 updated_timestamp_usec = 4;
  // Meta information.
  LessonMeta lesson_meta = 6;
  Algorithm algorithm = 7;
  repeated string experiment = 8;

  reserved 5;
}

// Next ID: 2
message ActivityBundles {
  repeated uint64 activity_ids = 1;
}

// Performance record of a Bell item.
//
// Next ID: 5
message BellItemRecord {
  // Next ID: 5
  message Score {
    float score = 1;

    reserved 3, 4;
  }
  uint64 item_id = 1;
  BellItem.Kind kind = 2;
  repeated Score score = 3;
  // This is only filled if the record belongs to show KP.
  repeated float proficiency = 4;
}

// Since the suggested lesson can be learned multiple times a day, we define the
// learning process of one single lesson as a session event.
//
// Next ID: 14
message SessionEvent {
  uint64 session_id = 1;
  uint64 lesson_id = 2;
  // The timestamp usec when the first session event is received.
  int64 session_timestamp_usec = 3;
  // If the user has complete the full lesson.
  bool is_complete = 4;
  int64 complete_timestamp_usec = 5;
  repeated string triggered_experiment = 10;
  // Answer details of each session stage.
  repeated StageAnswer stage_answer = 11;
  // Key is KP label.
  map<uint64, BellItemRecord> kp_record = 6 [deprecated = true];
  // Key is activity.
  map<uint64, BellItemRecord> activity_record = 7 [deprecated = true];
  // Learned activity bundles ID (fingerprint) to ActivityBundles.
  map<uint64, ActivityBundles> activity_bundles = 8 [deprecated = true];
}

// Next ID: 6
message StageAnswer {
  repeated ActivityAnswer activity_answer = 2;
  // Key is suggested activity ID, value is if the answer has been received.
  map<uint64, bool> suggested_activity = 3;
  uint64 last_suggested_activity = 4;
}

// Next ID: 5
message ActivityAnswer {
  // Activity ID.
  uint64 id = 1;
  // Activity score from 0 to 1.
  repeated float score = 3;
  // Key is KP ID, value is KP answer proto.
  map<uint64, KPAnswer> kp_answer = 2;
  // The posterior show KP proficiencies after an activity answer.
  map<uint64, float> kp_proficiency = 4;
}

// Next ID: 5
message KPAnswer {
  uint64 id = 1;
  // If the KP is show KP.
  bool is_show = 2;
  // Raw score from speech side.
  repeated float score = 3;

  reserved 4;
}

// Next ID: 6
message ReplacedLesson {
  uint64 lesson_id = 1;
  int64 replace_timestamp_usec = 2;
  repeated uint64 substitute_lesson_ids = 3;
  // Record the index of the last selected lesson, if be equal to 0, indicating
  // that there is no selection, or re-select replaced_lesson_id; if not 0 (N),
  // select the N-th substitute_lessons.
  int32 last_selected_lesson_index = 4;
  int64 last_select_timestamp_usec = 5;
}
